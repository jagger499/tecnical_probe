import { __assign, __rest } from "tslib";
import React from 'react';
import { withRipple } from '@rmwc/ripple';
import { Icon } from '@rmwc/icon';
import { Tag, useClassNames, createComponent, createMemoComponent } from '@rmwc/base';
/**
 * The Button component.
 */
export var Button = withRipple({
    surface: false
})(createComponent(function Button(props, ref) {
    var dense = props.dense, raised = props.raised, unelevated = props.unelevated, outlined = props.outlined, danger = props.danger, icon = props.icon, label = props.label, trailingIcon = props.trailingIcon, children = props.children, rest = __rest(props, ["dense", "raised", "unelevated", "outlined", "danger", "icon", "label", "trailingIcon", "children"]);
    var className = useClassNames(props, [
        'mdc-button',
        {
            'mdc-button--dense': dense,
            'mdc-button--raised': raised,
            'mdc-button--unelevated': unelevated,
            'mdc-button--outlined': outlined
        }
    ]);
    if (danger) {
        var existingStyle = rest.style || {};
        var dangerStyle = {
            '--mdc-theme-primary': 'var(--mdc-theme-error)',
            '--mdc-theme-on-primary': 'var(--mdc-theme-on-error)'
        };
        rest.style = __assign(__assign({}, dangerStyle), existingStyle);
    }
    return (React.createElement(Tag, __assign({ tag: "button" }, rest, { ref: ref, className: className }),
        React.createElement(ButtonRipple, null),
        !!icon && React.createElement(ButtonIcon, { icon: icon }),
        React.createElement("span", { className: "mdc-button__label" },
            label,
            children),
        !!trailingIcon && React.createElement(ButtonIcon, { icon: trailingIcon })));
}));
/*********************************************************************
 * Bits
 *********************************************************************/
var ButtonRipple = React.memo(function ButtonRipple() {
    return React.createElement("div", { className: "mdc-button__ripple" });
});
/** An icon that goes inside of buttons. This is an instance of the Icon component. */
var ButtonIcon = createMemoComponent(function ButtonIcon(props, ref) {
    var className = useClassNames(props, ['mdc-button__icon']);
    return React.createElement(Icon, __assign({}, props, { className: className, ref: ref }));
});
