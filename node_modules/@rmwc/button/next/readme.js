import React from 'react';
import { Docs, DocsExample, DocProps } from '@doc-utils';
import propsSrc from './generated-props.json';
import examples from './generated-examples.json';
import { Button } from '.';
import { CircularProgress } from '../circular-progress';
export default function () {
    return (React.createElement(Docs, { title: "Buttons", lead: "Buttons communicate the action that will occur when the user touches them.", module: "@rmwc/button", styles: [
            '@material/button/dist/mdc.button.css',
            '@rmwc/@rmwc/icon/icon.css',
            '@material/ripple/dist/mdc.ripple.css'
        ], docsLink: "https://material.io/develop/web/components/buttons/", examples: examples },
        React.createElement(DocsExample, { label: "Default" },
            React.createElement(Button, { label: "Button" })),
        React.createElement(DocsExample, { label: "Icons" },
            React.createElement(React.Fragment, null,
                React.createElement(Button, { label: "Icon", icon: "favorite" }),
                React.createElement(Button, { label: "Trailing", trailingIcon: "keyboard_arrow_right" }),
                React.createElement(Button, { label: "Loading", icon: React.createElement(CircularProgress, null) }))),
        React.createElement(DocsExample, { label: "Variants" },
            React.createElement(React.Fragment, null,
                React.createElement(Button, { label: "Raised", raised: true }),
                React.createElement(Button, { label: "Unelevated", unelevated: true }),
                React.createElement(Button, { label: "Outlined", outlined: true }),
                React.createElement(Button, { label: "Dense", dense: true }),
                React.createElement(Button, { label: "No Ripple", ripple: false }))),
        React.createElement(DocsExample, { label: "Danger" },
            React.createElement(React.Fragment, null,
                React.createElement(Button, { label: "Danger", danger: true, raised: true }),
                React.createElement(Button, { label: "Danger", danger: true, outlined: true }),
                React.createElement(Button, { label: "Danger", danger: true }))),
        React.createElement(DocsExample, { label: "Theming" },
            React.createElement(React.Fragment, null,
                React.createElement(Button, { label: "With Theme", raised: true, theme: ['secondaryBg', 'onSecondary'] }),
                React.createElement(Button, { label: "With Theme", theme: "secondary" }))),
        React.createElement(DocsExample, null,
            React.createElement(Button, null, "As Children")),
        React.createElement(DocProps, { src: propsSrc, components: [{ displayName: 'Button', component: Button }] })));
}
export var galleryExample = React.createElement(Button, { raised: true, label: "Raised" });
