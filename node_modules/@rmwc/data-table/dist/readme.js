"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.galleryExample = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var _doc_utils_1 = require("@doc-utils");
var generated_props_json_1 = tslib_1.__importDefault(require("./generated-props.json"));
var generated_examples_json_1 = tslib_1.__importDefault(require("./generated-examples.json"));
var _1 = require(".");
var select_1 = require("../select");
var checkbox_1 = require("../checkbox");
var switch_1 = require("../switch");
function default_1() {
    return (react_1.default.createElement(_doc_utils_1.Docs, { title: "Data Tables", lead: "Data tables display sets of data.", module: "@rmwc/data-table", styles: [
            '@material/data-table/dist/mdc.data-table.css',
            '@rmwc/data-table/data-table.css',
            '@rmwc/icon/icon.css'
        ], examples: generated_examples_json_1.default },
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Standard Table"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "The DataTable components are intended to be flexible, properly styled, Material compliant HTML tables. Because of the complexities of working with datasets (especially large ones), the DataTable component DOES NOT handle pagination, data fetching, sorting, or performance of long lists."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null, function Example() {
            var _a = tslib_1.__read(react_1.default.useState(null), 2), sortDir = _a[0], setSortDir = _a[1];
            return (react_1.default.createElement(_1.DataTable, null,
                react_1.default.createElement(_1.DataTableContent, null,
                    react_1.default.createElement(_1.DataTableHead, null,
                        react_1.default.createElement(_1.DataTableRow, null,
                            react_1.default.createElement(_1.DataTableHeadCell, null, "Item"),
                            react_1.default.createElement(_1.DataTableHeadCell, { alignEnd: true, sort: sortDir, onSortChange: function (sortDir) {
                                    // @ts-ignore
                                    setSortDir(sortDir);
                                    console.log(sortDir);
                                } }, "Quantity (Click Me)"),
                            react_1.default.createElement(_1.DataTableHeadCell, { alignEnd: true }, "Unit price"))),
                    react_1.default.createElement(_1.DataTableBody, null,
                        react_1.default.createElement(_1.DataTableRow, null,
                            react_1.default.createElement(_1.DataTableCell, null, "Cookies"),
                            react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "25"),
                            react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "$2.90")),
                        react_1.default.createElement(_1.DataTableRow, { selected: true },
                            react_1.default.createElement(_1.DataTableCell, null, "Pizza"),
                            react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "50"),
                            react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "$1.25")),
                        react_1.default.createElement(_1.DataTableRow, null,
                            react_1.default.createElement(_1.DataTableCell, null, "Icecream"),
                            react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "10"),
                            react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "$2.35"))))));
        }),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Scrollable / Sticky Rows and Columns"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "You can set a fixed sized for your table container to make it scrollable. Additionally, you can specify `stickyRows` or `stickyColumns` to affix rows or columns. Currently, only 1 row / column is supported but more may be supported in a future release."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null, function Example() {
            var _a = tslib_1.__read(react_1.default.useState(0), 2), rows = _a[0], setRows = _a[1];
            var _b = tslib_1.__read(react_1.default.useState(0), 2), cols = _b[0], setCols = _b[1];
            var sampleColumns = Array(7).fill(undefined);
            var sampleRows = Array(50).fill(undefined);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.DataTable, { style: { height: '300px', width: '375px' }, stickyRows: rows, stickyColumns: cols },
                    react_1.default.createElement(_1.DataTableContent, null,
                        react_1.default.createElement(_1.DataTableHead, null,
                            react_1.default.createElement(_1.DataTableRow, null,
                                react_1.default.createElement(_1.DataTableHeadCell, null, "Label"),
                                sampleColumns.map(function (v, i) { return (react_1.default.createElement(_1.DataTableHeadCell, { key: i }, "Header")); }))),
                        react_1.default.createElement(_1.DataTableBody, null, sampleRows.map(function (v, i) { return (react_1.default.createElement(_1.DataTableRow, { key: i },
                            react_1.default.createElement(_1.DataTableCell, null, "Label"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C1"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C2"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C3"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C4"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C5"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C6"),
                            react_1.default.createElement(_1.DataTableCell, null,
                                "R",
                                i,
                                " C7"))); })))),
                react_1.default.createElement("div", { className: "doc-controls" },
                    react_1.default.createElement(select_1.Select, { label: "Sticky Rows", options: ['0', '1'], value: String(rows), onChange: function (evt) { return setRows(Number(evt.currentTarget.value)); } }),
                    react_1.default.createElement(select_1.Select, { label: "Sticky Cols", options: ['0', '1'], value: String(cols), onChange: function (evt) { return setCols(Number(evt.currentTarget.value)); } }))));
        }),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Form Controls"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "DataTables play nice with the rest of the RMWC form controls. You are responsible for scripting your own selection behavior."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null, function Example() {
            var _a = tslib_1.__read(react_1.default.useState({}), 2), checked = _a[0], setChecked = _a[1];
            var sampleRows = new Array(5).fill(undefined);
            return (react_1.default.createElement(_1.DataTable, null,
                react_1.default.createElement(_1.DataTableContent, null,
                    react_1.default.createElement(_1.DataTableHead, null,
                        react_1.default.createElement(_1.DataTableRow, null,
                            react_1.default.createElement(_1.DataTableHeadCell, { hasFormControl: true },
                                react_1.default.createElement(checkbox_1.Checkbox, null)),
                            react_1.default.createElement(_1.DataTableHeadCell, null, "Label"),
                            react_1.default.createElement(_1.DataTableHeadCell, null, "Header"),
                            react_1.default.createElement(_1.DataTableHeadCell, null, "Header"),
                            react_1.default.createElement(_1.DataTableHeadCell, null, "Toggle"))),
                    react_1.default.createElement(_1.DataTableBody, null, sampleRows.map(function (v, i) { return (
                    // @ts-ignore
                    react_1.default.createElement(_1.DataTableRow, { key: i, selected: checked[i] },
                        react_1.default.createElement(_1.DataTableCell, { hasFormControl: true },
                            react_1.default.createElement(checkbox_1.Checkbox
                            // @ts-ignore
                            , { 
                                // @ts-ignore
                                checked: checked[i], onChange: function (evt) {
                                    // @ts-ignore
                                    checked[i] = evt.currentTarget.checked;
                                    setChecked(tslib_1.__assign({}, checked));
                                } })),
                        react_1.default.createElement(_1.DataTableCell, null, "Label"),
                        react_1.default.createElement(_1.DataTableCell, null,
                            react_1.default.createElement(select_1.Select, { placeholder: "--Select--", options: ['Cookies', 'Pizza', 'Icecream'] })),
                        react_1.default.createElement(_1.DataTableCell, null,
                            "R",
                            i,
                            " C3"),
                        react_1.default.createElement(_1.DataTableCell, null,
                            react_1.default.createElement(switch_1.Switch, null)))); })))));
        }),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Simplified Usage"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "If you just need to throw a table on the screen, you can pass an array of data to SimpleDataTable."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null,
            react_1.default.createElement(_1.SimpleDataTable, { getRowProps: function (row) {
                    return row[1] > 100 ? { activated: true } : {};
                }, getCellProps: function (cell, index, isHead) {
                    var props = { isNumeric: index > 0, style: undefined };
                    return !isHead && index === 2 && !cell.includes('$')
                        ? tslib_1.__assign(tslib_1.__assign({}, props), { style: { color: 'red' } }) : props;
                }, headers: [['Item', 'Quantity', 'Value']], data: [
                    ['Cookies', 25, '$12.40'],
                    ['Pizza', 11, '$10.43'],
                    ['Icecream', 3, '1.43'],
                    ['Candy', 72, '$22.45'],
                    ['Cakes', 101, '$215.05'],
                    ['Muffins', 3, '$5.97']
                ] })),
        react_1.default.createElement(_doc_utils_1.DocProps, { src: generated_props_json_1.default, components: [
                { displayName: 'DataTable', component: _1.DataTable },
                { displayName: 'DataTableRow', component: _1.DataTableRow },
                { displayName: 'DataTableCell', component: _1.DataTableCell },
                { displayName: 'DataTableHead', component: _1.DataTableHead },
                { displayName: 'DataTableBody', component: _1.DataTableBody },
                { displayName: 'DataTableHeadCell', component: _1.DataTableHeadCell },
                { displayName: 'SimpleDataTable', component: _1.SimpleDataTable }
            ] })));
}
exports.default = default_1;
exports.galleryExample = (react_1.default.createElement(_1.DataTable, { style: { transform: 'scale(0.66)' } },
    react_1.default.createElement(_1.DataTableContent, null,
        react_1.default.createElement(_1.DataTableHead, null,
            react_1.default.createElement(_1.DataTableRow, null,
                react_1.default.createElement(_1.DataTableHeadCell, null, "Item"),
                react_1.default.createElement(_1.DataTableHeadCell, { alignEnd: true }, "Quantity (Click Me)"),
                react_1.default.createElement(_1.DataTableHeadCell, { alignEnd: true }, "Unit price"))),
        react_1.default.createElement(_1.DataTableBody, null,
            react_1.default.createElement(_1.DataTableRow, null,
                react_1.default.createElement(_1.DataTableCell, null, "Cookies"),
                react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "25"),
                react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "$2.90")),
            react_1.default.createElement(_1.DataTableRow, { activated: true },
                react_1.default.createElement(_1.DataTableCell, null, "Pizza"),
                react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "50"),
                react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "$1.25")),
            react_1.default.createElement(_1.DataTableRow, null,
                react_1.default.createElement(_1.DataTableCell, null, "Icecream"),
                react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "10"),
                react_1.default.createElement(_1.DataTableCell, { alignEnd: true }, "$2.35"))))));
