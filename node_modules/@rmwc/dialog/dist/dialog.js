"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialogButton = exports.DialogActions = exports.DialogContent = exports.DialogTitle = exports.SimpleDialog = exports.Dialog = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var dialog_1 = require("@material/dialog");
var base_1 = require("@rmwc/base");
var button_1 = require("@rmwc/button");
var foundation_1 = require("./foundation");
/** A Dialog component. */
exports.Dialog = base_1.createComponent(function Dialog(props, ref) {
    var rootEl = foundation_1.useDialogFoundation(props).rootEl;
    var className = base_1.useClassNames(props, ['mdc-dialog']);
    var children = props.children, open = props.open, onOpen = props.onOpen, onOpened = props.onOpened, onClose = props.onClose, onClosed = props.onClosed, preventOutsideDismiss = props.preventOutsideDismiss, foundationRef = props.foundationRef, renderToPortal = props.renderToPortal, ariaLabelledby = props["aria-labelledby"], ariaDescribedBy = props["aria-describedby"], rest = tslib_1.__rest(props, ["children", "open", "onOpen", "onOpened", "onClose", "onClosed", "preventOutsideDismiss", "foundationRef", "renderToPortal", 'aria-labelledby', 'aria-describedby']);
    return (react_1.default.createElement(base_1.PortalChild, { renderTo: renderToPortal },
        react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, rest, { element: rootEl, className: className, ref: ref }),
            react_1.default.createElement("div", { className: "mdc-dialog__container" },
                react_1.default.createElement("div", { className: "mdc-dialog__surface", role: "alertdialog", "aria-modal": true, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedBy }, children)),
            react_1.default.createElement(DialogScrim, { disableInteraction: preventOutsideDismiss }))));
});
/** A SimpleDialog component for ease of use. */
exports.SimpleDialog = base_1.createComponent(function SimpleDialog(_a, ref) {
    var title = _a.title, header = _a.header, body = _a.body, footer = _a.footer, _b = _a.acceptLabel, acceptLabel = _b === void 0 ? 'Accept' : _b, _c = _a.cancelLabel, cancelLabel = _c === void 0 ? 'Cancel' : _c, children = _a.children, open = _a.open, rest = tslib_1.__rest(_a, ["title", "header", "body", "footer", "acceptLabel", "cancelLabel", "children", "open"]);
    return (react_1.default.createElement(exports.Dialog, tslib_1.__assign({ open: open }, rest, { ref: ref }),
        (!!title || !!header) && (react_1.default.createElement(exports.DialogTitle, null,
            !!title && title,
            !!header && header)),
        (!!body || children) && (react_1.default.createElement(exports.DialogContent, null,
            body,
            children)),
        (!!cancelLabel || !!acceptLabel || !!footer) && (react_1.default.createElement(exports.DialogActions, null,
            !!footer && footer,
            !!cancelLabel && (react_1.default.createElement(exports.DialogButton, { action: "close" }, cancelLabel)),
            !!acceptLabel && (react_1.default.createElement(exports.DialogButton, { action: "accept", isDefaultAction: true }, acceptLabel))))));
});
var DialogScrim = react_1.default.memo(function DialogScrim(_a) {
    var disableInteraction = _a.disableInteraction;
    var style = disableInteraction
        ? { pointerEvents: 'none' }
        : {};
    return react_1.default.createElement("div", { className: "mdc-dialog__scrim", style: style });
});
/** The Dialog title. */
exports.DialogTitle = base_1.createComponent(function DialogTitle(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-dialog__title']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "h2" }, props, { ref: ref, className: className }));
});
/** The Dialog content. */
exports.DialogContent = base_1.createComponent(function DialogContent(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-dialog__content']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** Actions container for the Dialog. */
exports.DialogActions = base_1.createComponent(function DialogActions(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-dialog__actions']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** Action buttons for the Dialog. */
exports.DialogButton = base_1.createComponent(function DialogButton(props, ref) {
    var _a;
    var className = base_1.useClassNames(props, ['mdc-dialog__button']);
    var _b = props.action, action = _b === void 0 ? '' : _b, isDefaultAction = props.isDefaultAction, rest = tslib_1.__rest(props, ["action", "isDefaultAction"]);
    var defaultProp = !!isDefaultAction
        ? (_a = {}, _a[dialog_1.MDCDialogFoundation.strings.BUTTON_DEFAULT_ATTRIBUTE] = true, _a) : {};
    return (react_1.default.createElement(button_1.Button, tslib_1.__assign({}, rest, defaultProp, { ref: ref, className: className, "data-mdc-dialog-action": action })));
});
