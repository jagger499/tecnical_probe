"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrawerAppContent = exports.DrawerContent = exports.DrawerSubtitle = exports.DrawerTitle = exports.DrawerHeader = exports.Drawer = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var base_1 = require("@rmwc/base");
var foundation_1 = require("./foundation");
/** A Drawer component. */
exports.Drawer = base_1.createComponent(function Drawer(props, ref) {
    if (props.dismissible) {
        return react_1.default.createElement(DismissibleDrawer, tslib_1.__assign({}, props, { ref: ref }));
    }
    if (props.modal) {
        return react_1.default.createElement(ModalDrawer, tslib_1.__assign({}, props, { ref: ref }));
    }
    return react_1.default.createElement(DrawerRoot, tslib_1.__assign({}, props, { ref: ref }));
});
var slidableDrawerFactory = function (useDrawerFoundation) {
    var DrawerInner = base_1.createComponent(function DrawerInner(props, ref) {
        var _a = useDrawerFoundation(props), rootEl = _a.rootEl, scrimEl = _a.scrimEl;
        var onOpen = props.onOpen, onClose = props.onClose, open = props.open, foundationRef = props.foundationRef, rest = tslib_1.__rest(props, ["onOpen", "onClose", "open", "foundationRef"]);
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(DrawerRoot, tslib_1.__assign({ ref: base_1.mergeRefs(rootEl.setRef, ref) }, rootEl.props(rest))),
            rest.modal && react_1.default.createElement(DrawerScrim, tslib_1.__assign({}, scrimEl.props({})))));
    });
    return DrawerInner;
};
var ModalDrawer = slidableDrawerFactory(foundation_1.useModalDrawerFoundation);
var DismissibleDrawer = slidableDrawerFactory(foundation_1.useDismissableDrawerFoundation);
var DrawerRoot = base_1.createComponent(function DrawerRoot(props, ref) {
    var dismissible = props.dismissible, modal = props.modal, foundationRef = props.foundationRef, rest = tslib_1.__rest(props, ["dismissible", "modal", "foundationRef"]);
    var className = base_1.useClassNames(props, [
        'mdc-drawer',
        {
            'mdc-drawer--dismissible': dismissible,
            'mdc-drawer--modal': modal
        }
    ]);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "aside" }, rest, { ref: ref, className: className }));
});
/** An optional header for the Drawer. */
exports.DrawerHeader = base_1.createComponent(function DrawerHeader(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-drawer__header']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** An title for the DrawerHeader. */
exports.DrawerTitle = base_1.createComponent(function DrawerTitle(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-drawer__title']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** A subtitle for the DrawerHeader. */
exports.DrawerSubtitle = base_1.createComponent(function DrawerSubtitle(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-drawer__subtitle']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** Content for Drawers. */
exports.DrawerContent = base_1.createComponent(function DrawerContent(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-drawer__content']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** Protects the app's UI from interactions while a modal drawer is open. */
var DrawerScrim = function (_a) {
    var onClick = _a.onClick;
    return react_1.default.createElement("div", { className: "mdc-drawer-scrim", onClick: onClick });
};
/** For the Dismissible variant only. Sibling element that is resized when the drawer opens/closes. */
exports.DrawerAppContent = base_1.createComponent(function DrawerAppContent(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-drawer-app-content']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
