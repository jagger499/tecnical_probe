"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconButton = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var base_1 = require("@rmwc/base");
var icon_1 = require("@rmwc/icon");
var ripple_1 = require("@rmwc/ripple");
var foundation_1 = require("./foundation");
/** An IconButton component that can also be used as a toggle. */
exports.IconButton = base_1.createComponent(function IconButton(_a, ref) {
    var rest = tslib_1.__rest(_a, []);
    if (rest.onIcon) {
        return react_1.default.createElement(IconButtonToggle, tslib_1.__assign({}, rest, { ref: ref }));
    }
    return react_1.default.createElement(IconButtonRoot, tslib_1.__assign({ tag: "button" }, rest, { ref: ref }));
});
var IconButtonToggle = base_1.createComponent(function IconButtonToggle(props, ref) {
    var icon = props.icon, onIcon = props.onIcon, foundationRef = props.foundationRef, rest = tslib_1.__rest(props, ["icon", "onIcon", "foundationRef"]);
    var _a = foundation_1.useIconButtonFoundation(props), isOn = _a.isOn, rootEl = _a.rootEl;
    return (react_1.default.createElement(IconButtonToggleRoot, tslib_1.__assign({ "aria-pressed": isOn }, rootEl.props(rest), { tag: "button", ref: ref }),
        react_1.default.createElement(IconButtonIcon, { icon: icon }),
        react_1.default.createElement(IconButtonIcon, { icon: onIcon, on: true })));
});
/*********************************************************************
 * Bits
 *********************************************************************/
var IconButtonRoot = ripple_1.withRipple({
    surface: false,
    unbounded: true
})(base_1.createComponent(function IconButtonRoot(props, ref) {
    var checked = props.checked, label = props.label, foundationRef = props.foundationRef, rest = tslib_1.__rest(props, ["checked", "label", "foundationRef"]);
    var className = base_1.useClassNames(props, [
        'mdc-icon-button',
        {
            'mdc-icon-button--on': checked
        }
    ]);
    return (react_1.default.createElement(icon_1.Icon, tslib_1.__assign({ role: "button", tabIndex: 0, "aria-label": label }, rest, { className: className, ref: ref })));
}));
var IconButtonToggleRoot = ripple_1.withRipple({
    surface: false,
    unbounded: true
})(base_1.createComponent(function IconButtonToggleRoot(props, ref) {
    var checked = props.checked, rest = tslib_1.__rest(props, ["checked"]);
    var className = base_1.useClassNames(props, [
        'mdc-icon-button',
        {
            'mdc-icon-button--on': checked
        }
    ]);
    return (react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "button", role: "button", tabIndex: 0 }, rest, { className: className, ref: ref })));
}));
var IconButtonIcon = react_1.default.memo(function IconButtonIcon(props) {
    var on = props.on, rest = tslib_1.__rest(props, ["on"]);
    var className = base_1.useClassNames(props, [
        'mdc-icon-button__icon',
        {
            'mdc-icon-button__icon--on': props.on
        }
    ]);
    return react_1.default.createElement(icon_1.Icon, tslib_1.__assign({}, rest, { className: className }));
});
