import { __assign, __rest } from "tslib";
import React from 'react';
import { Tag, useClassNames, createComponent } from '@rmwc/base';
import { Icon } from '@rmwc/icon';
import { withRipple } from '@rmwc/ripple';
import { useIconButtonFoundation } from './foundation';
/** An IconButton component that can also be used as a toggle. */
export var IconButton = createComponent(function IconButton(_a, ref) {
    var rest = __rest(_a, []);
    if (rest.onIcon) {
        return React.createElement(IconButtonToggle, __assign({}, rest, { ref: ref }));
    }
    return React.createElement(IconButtonRoot, __assign({ tag: "button" }, rest, { ref: ref }));
});
var IconButtonToggle = createComponent(function IconButtonToggle(props, ref) {
    var icon = props.icon, onIcon = props.onIcon, foundationRef = props.foundationRef, rest = __rest(props, ["icon", "onIcon", "foundationRef"]);
    var _a = useIconButtonFoundation(props), isOn = _a.isOn, rootEl = _a.rootEl;
    return (React.createElement(IconButtonToggleRoot, __assign({ "aria-pressed": isOn }, rootEl.props(rest), { tag: "button", ref: ref }),
        React.createElement(IconButtonIcon, { icon: icon }),
        React.createElement(IconButtonIcon, { icon: onIcon, on: true })));
});
/*********************************************************************
 * Bits
 *********************************************************************/
var IconButtonRoot = withRipple({
    surface: false,
    unbounded: true
})(createComponent(function IconButtonRoot(props, ref) {
    var checked = props.checked, label = props.label, foundationRef = props.foundationRef, rest = __rest(props, ["checked", "label", "foundationRef"]);
    var className = useClassNames(props, [
        'mdc-icon-button',
        {
            'mdc-icon-button--on': checked
        }
    ]);
    return (React.createElement(Icon, __assign({ role: "button", tabIndex: 0, "aria-label": label }, rest, { className: className, ref: ref })));
}));
var IconButtonToggleRoot = withRipple({
    surface: false,
    unbounded: true
})(createComponent(function IconButtonToggleRoot(props, ref) {
    var checked = props.checked, rest = __rest(props, ["checked"]);
    var className = useClassNames(props, [
        'mdc-icon-button',
        {
            'mdc-icon-button--on': checked
        }
    ]);
    return (React.createElement(Tag, __assign({ tag: "button", role: "button", tabIndex: 0 }, rest, { className: className, ref: ref })));
}));
var IconButtonIcon = React.memo(function IconButtonIcon(props) {
    var on = props.on, rest = __rest(props, ["on"]);
    var className = useClassNames(props, [
        'mdc-icon-button__icon',
        {
            'mdc-icon-button__icon--on': props.on
        }
    ]);
    return React.createElement(Icon, __assign({}, rest, { className: className }));
});
