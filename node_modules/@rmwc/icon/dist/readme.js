"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.galleryExample = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var _doc_utils_1 = require("@doc-utils");
var generated_props_json_1 = tslib_1.__importDefault(require("./generated-props.json"));
var generated_examples_json_1 = tslib_1.__importDefault(require("./generated-examples.json"));
var _1 = require(".");
var button_1 = require("../button");
var provider_1 = require("../provider");
function default_1() {
    return (react_1.default.createElement(_doc_utils_1.Docs, { title: "Icons", lead: "Material icons use geometric shapes to visually represent core ideas, capabilities, or topics.", module: "@rmwc/icon", styles: ['@rmwc/icon/icon.css'], docsLink: "https://material.io/icons", examples: generated_examples_json_1.default },
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Setup"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "Icons are not part of the official material-components-web spec, but they are referenced many times in the documentation. RMWC provides a declarative way to use icons. Note that RMWC does not ship with any icons of its own. Make sure you include an icon set! You can use any one you want, but Google's Material Icons are available through open source. Follow Google's developer guide to get them setup with your app. https://google.github.io/material-design-icons/"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "There are lots of different strategies for implementing icons on the web, and the Icon component is flexible for most of them. Use ligatures, classNames, inline SVGs, HTML, or URLs to get icons into your app. The default strategy is 'ligature' which works with the material.io font icon set."),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Basic Usage"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "The Icon component, (really the icon prop itself) can accept a variety of formats. Anywhere you see a component prop like `icon` or `trailingIcon` will inherit the same behavior."),
        react_1.default.createElement(_doc_utils_1.DocsExample, { label: "String" },
            react_1.default.createElement(_1.Icon, { icon: "favorite" })),
        react_1.default.createElement(_doc_utils_1.DocsExample, { label: "Child Component" },
            react_1.default.createElement(_1.Icon, { icon: react_1.default.createElement("div", { style: {
                        background: 'green',
                        width: '24px',
                        height: '24px',
                        borderRadius: '100px'
                    } }) })),
        react_1.default.createElement(_doc_utils_1.DocsExample, { label: "Passing Options" },
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Icon, { icon: { icon: 'star', strategy: 'ligature' } }),
                react_1.default.createElement(button_1.Button, { label: "Hello!", icon: {
                        icon: 'add',
                        onMouseOver: function () { return console.log('OVER'); }
                    } }))),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Icon Sizing"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "The Material spec details multiple sizes for icons. The Icon component doesn't assign a size by default, but these are available to you to force a size. Please note, this will only work if you've included the RMWC icon css file."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null,
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Icon, { icon: { icon: 'favorite', size: 'xsmall' } }),
                react_1.default.createElement(_1.Icon, { icon: { icon: 'favorite', size: 'small' } }),
                react_1.default.createElement(_1.Icon, { icon: { icon: 'favorite', size: 'medium' } }),
                react_1.default.createElement(_1.Icon, { icon: { icon: 'favorite', size: 'large' } }),
                react_1.default.createElement(_1.Icon, { icon: { icon: 'favorite', size: 'xlarge' } }))),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Ligatures"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "This is for icon fonts that support ligatures like material-icons. This is the default strategy if nothing is set and doesn't require any additional setup if you are using material-icons."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null,
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Icon, { icon: "favorite" }),
                react_1.default.createElement(_1.Icon, { icon: "favorite_outline" }),
                react_1.default.createElement(_1.Icon, { icon: { icon: 'star', strategy: 'ligature' } }))),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "URLs"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "This is for icons that are accessible via HTTP(S) and will be loaded directly into an `img` tag. This can be auto-detected for things that look like urls. The image will be set as a backgroundImage of the icon. Make sure you impor the RMWC icon css file for this to work properly."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null,
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Icon, { icon: "images/icons/twitter.png" }),
                react_1.default.createElement(_1.Icon, { icon: {
                        icon: 'images/icons/twitter.png',
                        strategy: 'url'
                    } }))),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Components / Inline SVGs"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "This will render a child component inside of the icon. This is useful for all sorts of customization and for rendering inline SVGs. The following example shows rendering an SVG, as well as an arbitrary `div`."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null,
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Icon, { icon: react_1.default.createElement("div", { style: {
                            background: 'green',
                            width: '24px',
                            height: '24px',
                            borderRadius: '100px'
                        } }) }),
                react_1.default.createElement(_1.Icon, { icon: {
                        strategy: 'component',
                        icon: (react_1.default.createElement("svg", { style: { width: '24px', height: '24px' }, viewBox: "0 0 24 24" },
                            react_1.default.createElement("path", { fill: "#4285F4", d: "M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.2,4.73C15.29,4.73 17.1,6.7 17.1,6.7L19,4.72C19,4.72 16.56,2 12.1,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.25,22C17.6,22 21.5,18.33 21.5,12.91C21.5,11.76 21.35,11.1 21.35,11.1V11.1Z" })))
                    } }))),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Classnames"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "Some font icon sets like Ion Icons and Glyph Icons render based on a className that is set. RMWC docs doesn't include extra icon fonts so there is no example to render, but the below code should give you an approximation."),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "**THIS CANNOT BE AUTO DETECTED**. You'll have to explicitly set the strategy directly on the Icon or specify it globally via the RMWCProvider."),
        react_1.default.createElement(_doc_utils_1.DocsExample, { codeOnly: true },
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Icon, { icon: {
                        icon: 'star',
                        strategy: 'className',
                        basename: 'icon',
                        prefix: 'ion-'
                    } }),
                react_1.default.createElement(provider_1.RMWCProvider, { icon: {
                        strategy: 'className',
                        basename: 'glyphicons',
                        prefix: 'glyphicons-'
                    } },
                    react_1.default.createElement(_1.Icon, { icon: "heart" })))),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Custom Rendering"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "Sometimes, you just need to do your own thing. Maybe you have a legacy project that already has icons and you want to incorporate them with RMWC. If none of the other strategies are what you need, then you can hijack the whole thing and delegate it to your own render function."),
        react_1.default.createElement(_doc_utils_1.DocsExample, { label: "Simple Example" },
            react_1.default.createElement(_1.Icon, { icon: {
                    icon: 'favorite',
                    strategy: 'custom',
                    render: function (_a) {
                        var content = _a.content;
                        return react_1.default.createElement("div", null,
                            "Hello + ",
                            content);
                    }
                } })),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "A more relevant example involves an app that has a custom / existing icon component. There are a litany of reasons why your app might need one, but if you've found this section of the docs you likely know what problem you need to solve."),
        react_1.default.createElement(_doc_utils_1.DocsExample, { codeOnly: true }, 
        /* jsx */ "\n          // 1) Your app has an icon component you use\n          import { MyIconComponent } from '@rmwc/icon';\n          <MyIconComponent name=\"search\" />\n\n          // 2) Now you are using RMWC, lots of components are instances of Icons\n          // You need to be able to delegate the handling of an icon prop to your own component\n          import { TextField } from '@rmwc/textField';\n          import { Chip } from '@rmwc/chip';\n          <TextField icon=\"favorite\" />\n          <Chip icon=\"favorite\" />\n\n          // 3) Instead, you should set the custom strategy to be your default\n          // and add your own handling with RMWCProvider\n          import React from 'react';\n          import * as ReactDOM from 'react-dom';\n          import App from './App'; // your main app component\n          import { RMWCProvider } from '@rmwc/provider';\n          import { MyIconComponent } from '@rmwc/icon';\n\n          const iconRenderHandler = ({ content, className, ...rest }) => {\n            // content is whatever was passed to the icon prop\n\n            // className is the fully processed className taking into account the basename and prefix defaults\n            // it's important to include this because MDC often has classes like text-field-icon directly\n            // on the component for alignment\n\n            // rest is just any other props\n            return <MyIconComponent className={className} name={content} {...rest} />\n          };\n\n          ReactDOM.render(\n            <RMWCProvider icon={{strategy: 'custom', render: iconRenderHandler}}>\n              <App />\n            </RMWCProvider>,\n            document.getElementById('root')\n          );\n\n          // 4) Now anywhere in your app that an Icon instance is used, it will be\n          // delegated to your handler and render your custom component\n          import { TextFieldIcon } from '@rmwc/textfield';\n          <TextFieldIcon icon=\"search\" />\n        "),
        react_1.default.createElement(_doc_utils_1.DocProps, { src: generated_props_json_1.default, components: [{ displayName: 'Icon', component: _1.Icon }] })));
}
exports.default = default_1;
exports.galleryExample = (react_1.default.createElement(react_1.default.Fragment, null,
    react_1.default.createElement(_1.Icon, { style: { margin: '0.75rem' }, icon: { icon: 'favorite_outline', size: 'large' } }),
    react_1.default.createElement(_1.Icon, { style: { margin: '0.75rem' }, icon: { icon: 'mood', size: 'large' } }),
    react_1.default.createElement(_1.Icon, { style: { margin: '0.75rem' }, icon: { icon: 'local_pizza', size: 'large' } })));
