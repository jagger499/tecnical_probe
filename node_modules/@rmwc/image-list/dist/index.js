"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageListLabel = exports.ImageListSupporting = exports.ImageListImage = exports.ImageListImageAspectContainer = exports.ImageListItem = exports.ImageList = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var base_1 = require("@rmwc/base");
/** The root of the Image List. */
exports.ImageList = base_1.createComponent(function ImageList(props, ref) {
    var masonry = props.masonry, withTextProtection = props.withTextProtection, rest = tslib_1.__rest(props, ["masonry", "withTextProtection"]);
    var className = base_1.useClassNames(props, [
        'mdc-image-list',
        {
            'mdc-image-list--masonry': masonry,
            'mdc-image-list--with-text-protection': withTextProtection
        }
    ]);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "ul" }, rest, { ref: ref, className: className }));
});
/** Indicates each item in an Image List. */
exports.ImageListItem = base_1.createComponent(function ImageListItem(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-image-list__item']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "li" }, props, { ref: ref, className: className }));
});
/** Optional. Parent of each itemâ€™s image element, responsible for constraining aspect ratio. This element may be omitted entirely if images are already sized to the correct aspect ratio. */
exports.ImageListImageAspectContainer = base_1.createComponent(function ImageListImageAspectContainer(props, ref) {
    var className = base_1.useClassNames(props, [
        'mdc-image-list__image-aspect-container'
    ]);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** Indicates the image element in each item. */
exports.ImageListImage = base_1.createComponent(function ImageListImage(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-image-list__image']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "img" }, props, { ref: ref, className: className }));
});
/** Optional. Indicates the area within each item containing the supporting text label, if the Image List contains text labels. */
exports.ImageListSupporting = base_1.createComponent(function ImageListSupporting(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-image-list__supporting']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
/** Optional. Indicates the text label in each item, if the Image List contains text labels. */
exports.ImageListLabel = base_1.createComponent(function ImageListLabel(props, ref) {
    var className = base_1.useClassNames(props, ['mdc-image-list__label']);
    return react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, props, { ref: ref, className: className }));
});
