"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeProvider = exports.Theme = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var base_1 = require("@rmwc/base");
var utils_1 = require("./utils");
/** A Theme Component. */
exports.Theme = base_1.createComponent(function Theme(props, ref) {
    var use = props.use, wrap = props.wrap, rest = tslib_1.__rest(props, ["use", "wrap"]);
    var className = base_1.useClassNames(props, [base_1.parseThemeOptions(use).join(' ')]);
    if (wrap) {
        return base_1.wrapChild(tslib_1.__assign(tslib_1.__assign({}, rest), { ref: ref,
            className: className }));
    }
    return (react_1.default.createElement(base_1.Tag, tslib_1.__assign({ tag: "span", theme: use }, rest, { ref: ref, className: className })));
});
/** A ThemeProvider. This sets theme colors for its child tree. */
exports.ThemeProvider = base_1.createComponent(function ThemeProvider(props, ref) {
    var _a, _b;
    var parsed = JSON.stringify(props.options);
    var colors = react_1.useMemo(function () {
        var processedColors = Object.keys(props.options).reduce(function (acc, key) {
            var val = props.options[key];
            key = key.startsWith('--') ? key : "--mdc-theme-" + base_1.toDashCase(key);
            acc[key] = val;
            return acc;
        }, {});
        return utils_1.getAutoColorsForTheme(processedColors);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [parsed]);
    var options = props.options, _c = props.style, style = _c === void 0 ? {} : _c, wrap = props.wrap, rest = tslib_1.__rest(props, ["options", "style", "wrap"]);
    var className = base_1.useClassNames(props, [
        wrap &&
            typeof rest.children === 'object' && ((_b = (_a = 
        // @ts-ignore
        rest.children) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.className)
    ]);
    var themeStyles = tslib_1.__assign(tslib_1.__assign({}, style), colors);
    if (wrap && rest.children) {
        return base_1.wrapChild(tslib_1.__assign(tslib_1.__assign({}, rest), { style: themeStyles, ref: ref }));
    }
    return (react_1.default.createElement(base_1.Tag, tslib_1.__assign({}, rest, { style: themeStyles, className: className, ref: ref })));
});
