"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var base_1 = require("@rmwc/base");
var rc_tooltip_1 = tslib_1.__importDefault(require("rc-tooltip"));
var provider_1 = require("@rmwc/provider");
/** A Tooltip component for displaying informative popover information. */
exports.Tooltip = function Tooltip(_a) {
    var children = _a.children, content = _a.content, className = _a.className, open = _a.open, rest = tslib_1.__rest(_a, ["children", "content", "className", "open"]);
    var providerContext = provider_1.useProviderContext();
    // merge together provider options
    var _b = tslib_1.__assign(tslib_1.__assign({}, providerContext.tooltip), rest), _c = _b.showArrow, showArrow = _c === void 0 ? false : _c, _d = _b.enterDelay, enterDelay = _d === void 0 ? 0 : _d, _e = _b.leaveDelay, leaveDelay = _e === void 0 ? 0 : _e, _f = _b.align, align = _f === void 0 ? 'top' : _f, _g = _b.activateOn, activateOn = _g === void 0 ? ['hover', 'focus'] : _g;
    return (react_1.default.createElement(rc_tooltip_1.default, tslib_1.__assign({}, (open !== undefined ? { visible: open } : {}), { trigger: Array.isArray(activateOn) ? activateOn : [activateOn], prefixCls: "rmwc-tooltip", placement: align, transitionName: "rmwc-tooltip-zoom", mouseEnterDelay: enterDelay / 1000, mouseLeaveDelay: leaveDelay / 1000, overlay: content, overlayClassName: base_1.classNames(className, {
            'rmwc-tooltip--show-arrow': showArrow
        }), destroyTooltipOnHide: true }), children));
};
