"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.galleryContent = exports.menuContent = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var circular_progress_1 = require("@rmwc/circular-progress");
var doc_utils_1 = require("../../../doc-utils");
var README_INSTALLATION_md_1 = tslib_1.__importDefault(require("../markdown/README-INSTALLATION.md"));
var README_USAGE_md_1 = tslib_1.__importDefault(require("../markdown/README-USAGE.md"));
var README_STYLING_THEMING_md_1 = tslib_1.__importDefault(require("../markdown/README-STYLING-THEMING.md"));
var README_METHODOLOGY_md_1 = tslib_1.__importDefault(require("../markdown/README-METHODOLOGY.md"));
var README_LIBRARY_INTEGRATIONS_md_1 = tslib_1.__importDefault(require("../markdown/README-LIBRARY-INTEGRATIONS.md"));
var README_TYPES_md_1 = tslib_1.__importDefault(require("../markdown/README-TYPES.md"));
var readme_1 = require("@rmwc/avatar/readme");
var readme_2 = require("@rmwc/badge/readme");
var readme_3 = require("@rmwc/button/readme");
var readme_4 = require("@rmwc/fab/readme");
var readme_5 = require("@rmwc/icon-button/readme");
var readme_6 = require("@rmwc/card/readme");
var readme_7 = require("@rmwc/chip/readme");
var readme_8 = require("@rmwc/data-table/readme");
var readme_9 = require("@rmwc/drawer/readme");
var readme_10 = require("@rmwc/dialog/readme");
var readme_11 = require("@rmwc/elevation/readme");
var readme_12 = require("@rmwc/grid-list/readme");
var readme_13 = require("@rmwc/image-list/readme");
var readme_14 = require("@rmwc/checkbox/readme");
var readme_15 = require("@rmwc/radio/readme");
var readme_16 = require("@rmwc/select/readme");
var readme_17 = require("@rmwc/slider/readme");
var readme_18 = require("@rmwc/switch/readme");
var readme_19 = require("@rmwc/textfield/readme");
var readme_20 = require("@rmwc/grid/readme");
var readme_21 = require("@rmwc/linear-progress/readme");
var readme_22 = require("@rmwc/circular-progress/readme");
var readme_23 = require("@rmwc/list/readme");
var readme_24 = require("@rmwc/menu/readme");
var readme_25 = require("@rmwc/ripple/readme");
var readme_26 = require("@rmwc/snackbar/readme");
var readme_27 = require("@rmwc/tabs/readme");
var readme_28 = require("@rmwc/theme/readme");
var readme_29 = require("@rmwc/top-app-bar/readme");
var readme_30 = require("@rmwc/tooltip/readme");
var readme_31 = require("@rmwc/typography/readme");
var readme_32 = require("@rmwc/icon/readme");
var InstallationDocs = function () { return react_1.default.createElement(doc_utils_1.DocsMarkdown, { fileSrc: README_INSTALLATION_md_1.default }); };
var UsageDocs = function () { return react_1.default.createElement(doc_utils_1.DocsMarkdown, { fileSrc: README_USAGE_md_1.default }); };
var StylingThemingDocs = function () { return react_1.default.createElement(doc_utils_1.DocsMarkdown, { fileSrc: README_STYLING_THEMING_md_1.default }); };
var MethodologyDocs = function () { return react_1.default.createElement(doc_utils_1.DocsMarkdown, { fileSrc: README_METHODOLOGY_md_1.default }); };
var LibraryIntegrationsDocs = function () { return (react_1.default.createElement(doc_utils_1.DocsMarkdown, { fileSrc: README_LIBRARY_INTEGRATIONS_md_1.default })); };
var TypeDocs = function () { return react_1.default.createElement(doc_utils_1.DocsMarkdown, { fileSrc: README_TYPES_md_1.default }); };
var ResourcesDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('../views/resources')); }); });
var AvatarDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/avatar/readme')); }); });
var BadgeDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/badge/readme')); }); });
var ButtonDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/button/readme')); }); });
var FabDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/fab/readme')); }); });
var IconButtonDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/icon-button/readme')); }); });
var CardDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/card/readme')); }); });
var ChipDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/chip/readme')); }); });
var DataTableDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/data-table/readme')); }); });
var DialogDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/dialog/readme')); }); });
var DrawerDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/drawer/readme')); }); });
var ElevationDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/elevation/readme')); }); });
var GridListDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/grid-list/readme')); }); });
var ImageListDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/image-list/readme')); }); });
var CheckboxDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/checkbox/readme')); }); });
var FormfieldDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/formfield/readme')); }); });
var RadioDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/radio/readme')); }); });
var SelectDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/select/readme')); }); });
var SliderDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/slider/readme')); }); });
var SwitchDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/switch/readme')); }); });
var TextfieldDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/textfield/readme')); }); });
var GridDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/grid/readme')); }); });
var LinearProgressDocs = react_1.default.lazy(function () {
    return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/linear-progress/readme')); });
});
var CircularProgressDocsDocs = react_1.default.lazy(function () {
    return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/circular-progress/readme')); });
});
var ListDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/list/readme')); }); });
var ListCollapsibleDocs = react_1.default.lazy(function () {
    return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/list/readme-collapsible')); });
});
var ListVariantsDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/list/readme-variants')); }); });
var MenuDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/menu/readme')); }); });
var RippleDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/ripple/readme')); }); });
var SnackbarDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/snackbar/readme')); }); });
var TabsDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/tabs/readme')); }); });
var ThemeDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/theme/readme')); }); });
var TopAppBarDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/top-app-bar/readme')); }); });
var TypographyDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/typography/readme')); }); });
var IconDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/icon/readme')); }); });
var ProviderDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/provider/readme')); }); });
var TooltipDocs = react_1.default.lazy(function () { return Promise.resolve().then(function () { return tslib_1.__importStar(require('@rmwc/tooltip/readme')); }); });
var Loading = function () { return (react_1.default.createElement("div", { style: {
        flex: 1,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100%',
        boxSizing: 'border-box'
    } },
    react_1.default.createElement(circular_progress_1.CircularProgress, { size: "xlarge" }))); };
var Loadable = function (Component) { return function () { return (react_1.default.createElement(react_1.default.Suspense, { fallback: react_1.default.createElement(Loading, null) },
    react_1.default.createElement(Component, null))); }; };
exports.menuContent = [
    {
        label: 'Getting Started',
        options: [
            {
                label: 'Installation',
                url: "/installation",
                component: Loadable(InstallationDocs)
            },
            {
                label: 'Basic Usage',
                url: "/usage",
                component: Loadable(UsageDocs)
            },
            {
                label: 'Project Methodology',
                url: "/methodology",
                component: Loadable(MethodologyDocs)
            },
            {
                label: 'Type System',
                url: "/type-system",
                component: Loadable(TypeDocs)
            },
            {
                label: 'Library Integrations',
                url: "/library-integrations",
                component: Loadable(LibraryIntegrationsDocs)
            }
        ]
    },
    {
        label: 'Style and Theming',
        url: "/styling-theming",
        component: Loadable(StylingThemingDocs)
    },
    {
        label: 'Resources',
        url: "/resources",
        component: Loadable(ResourcesDocs)
    },
    {
        label: 'Components',
        options: [
            {
                label: 'Avatars',
                url: "/avatars",
                gallery: readme_1.galleryExample,
                component: Loadable(AvatarDocs)
            },
            {
                label: 'Badges',
                url: "/badges",
                gallery: readme_2.galleryExample,
                component: Loadable(BadgeDocs)
            },
            {
                label: 'Buttons',
                options: [
                    {
                        label: 'Buttons',
                        url: "/buttons",
                        gallery: readme_3.galleryExample,
                        component: Loadable(ButtonDocs)
                    },
                    {
                        label: 'Fabs',
                        url: "/fabs",
                        gallery: readme_4.galleryExample,
                        component: Loadable(FabDocs)
                    },
                    {
                        label: 'Icon Buttons',
                        url: "/icon-buttons",
                        gallery: readme_5.galleryExample,
                        component: Loadable(IconButtonDocs)
                    }
                ]
            },
            {
                label: 'Cards',
                url: "/cards",
                gallery: readme_6.galleryExample,
                component: Loadable(CardDocs)
            },
            {
                label: 'Chips',
                url: "/chips",
                gallery: readme_7.galleryExample,
                component: Loadable(ChipDocs)
            },
            {
                label: 'Data Tables',
                url: "/data-tables",
                gallery: readme_8.galleryExample,
                component: Loadable(DataTableDocs)
            },
            {
                label: 'Dialogs',
                url: "/dialogs",
                gallery: readme_10.galleryExample,
                component: Loadable(DialogDocs)
            },
            {
                label: 'Drawers',
                url: "/drawers",
                gallery: readme_9.galleryExample,
                component: Loadable(DrawerDocs)
            },
            {
                label: 'Elevation',
                url: "/elevation",
                gallery: readme_11.galleryExample,
                component: Loadable(ElevationDocs)
            },
            {
                label: 'Grids',
                options: [
                    {
                        label: 'Layout Grid',
                        url: "/layout-grid",
                        gallery: readme_20.galleryExample,
                        component: Loadable(GridDocs)
                    },
                    {
                        label: 'Image Lists',
                        url: "/image-lists",
                        gallery: readme_13.galleryExample,
                        component: Loadable(ImageListDocs)
                    },
                    {
                        label: 'Grid Lists',
                        url: "/grid-lists",
                        gallery: readme_12.galleryExample,
                        component: Loadable(GridListDocs)
                    }
                ]
            },
            {
                label: 'Inputs and Controls',
                options: [
                    {
                        label: 'Checkboxes',
                        url: "/checkboxes",
                        gallery: readme_14.galleryExample,
                        component: Loadable(CheckboxDocs)
                    },
                    {
                        label: 'FormFields',
                        url: "/formfields",
                        component: Loadable(FormfieldDocs)
                    },
                    {
                        label: 'Radio Buttons',
                        url: "/radio-buttons",
                        gallery: readme_15.galleryExample,
                        component: Loadable(RadioDocs)
                    },
                    {
                        label: 'Select Menus',
                        url: "/select-menus",
                        gallery: readme_16.galleryExample,
                        component: Loadable(SelectDocs)
                    },
                    {
                        label: 'Sliders',
                        url: "/sliders",
                        gallery: readme_17.galleryExample,
                        component: Loadable(SliderDocs)
                    },
                    {
                        label: 'Switches',
                        url: "/switches",
                        gallery: readme_18.galleryExample,
                        component: Loadable(SwitchDocs)
                    },
                    {
                        label: 'Text Fields',
                        url: "/text-fields",
                        gallery: readme_19.galleryExample,
                        component: Loadable(TextfieldDocs)
                    }
                ]
            },
            {
                label: 'Progress',
                options: [
                    {
                        label: 'Linear Progress',
                        url: "/linear-progress",
                        gallery: readme_21.galleryExample,
                        component: Loadable(LinearProgressDocs)
                    },
                    {
                        label: 'Circular Progress',
                        url: "/circular-progress",
                        gallery: readme_22.galleryExample,
                        component: Loadable(CircularProgressDocsDocs)
                    }
                ]
            },
            {
                label: 'Lists',
                options: [
                    {
                        label: 'Lists',
                        url: "/lists",
                        gallery: readme_23.galleryExample,
                        component: Loadable(ListDocs)
                    },
                    {
                        label: 'Collapsible',
                        url: "/lists-collapsible",
                        component: Loadable(ListCollapsibleDocs)
                    },
                    {
                        label: 'Variants',
                        url: "/lists-variants",
                        component: Loadable(ListVariantsDocs)
                    }
                ]
            },
            {
                label: 'Menus',
                url: "/menus",
                gallery: readme_24.galleryExample,
                component: Loadable(MenuDocs)
            },
            {
                label: 'Ripples',
                url: "/ripples",
                gallery: readme_25.galleryExample,
                component: Loadable(RippleDocs)
            },
            {
                label: 'Snackbars',
                url: "/snackbars",
                gallery: readme_26.galleryExample,
                component: Loadable(SnackbarDocs)
            },
            {
                label: 'Tabs',
                url: "/tabs",
                gallery: readme_27.galleryExample,
                component: Loadable(TabsDocs)
            },
            {
                label: 'Theme',
                url: "/theme",
                gallery: readme_28.galleryExample,
                component: Loadable(ThemeDocs)
            },
            {
                label: 'Tooltips',
                url: "/tooltips",
                gallery: readme_30.galleryExample,
                component: Loadable(TooltipDocs)
            },
            {
                label: 'Top App Bar',
                url: "/top-app-bar",
                gallery: readme_29.galleryExample,
                component: Loadable(TopAppBarDocs)
            },
            {
                label: 'Typography',
                url: "/typography",
                gallery: readme_31.galleryExample,
                component: Loadable(TypographyDocs)
            },
            {
                label: 'Icons',
                url: "/icons",
                gallery: readme_32.galleryExample,
                component: Loadable(IconDocs)
            },
            {
                label: 'Provider',
                url: "/provider",
                component: Loadable(ProviderDocs)
            }
        ]
    }
];
exports.galleryContent = exports.menuContent
    .reduce(function (acc, item) {
    if ('options' in item) {
        acc.push.apply(acc, tslib_1.__spread(item.options));
    }
    else {
        acc.push(item);
    }
    return acc;
}, [])
    .filter(function (item) { return !!item.gallery; });
